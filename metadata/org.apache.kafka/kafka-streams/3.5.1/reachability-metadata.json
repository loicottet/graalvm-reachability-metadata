{
  "reflection": [
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.StreamsConfig"
      },
      "type": "org.apache.kafka.streams.errors.DefaultProductionExceptionHandler",
      "allDeclaredMethods": true,
      "allPublicConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.StreamsConfig"
      },
      "type": "org.apache.kafka.streams.errors.LogAndFailExceptionHandler",
      "allDeclaredMethods": true,
      "allPublicConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.StreamsConfig"
      },
      "type": "org.apache.kafka.streams.processor.FailOnInvalidTimestamp",
      "allDeclaredMethods": true,
      "allPublicConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.StreamsConfig"
      },
      "type": "org.apache.kafka.streams.processor.internals.DefaultKafkaClientSupplier",
      "allDeclaredMethods": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.processor.internals.StateDirectory"
      },
      "type": "org.apache.kafka.streams.processor.internals.StateDirectory$StateDirectoryProcessFile",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.StreamsConfig"
      },
      "type": "org.apache.kafka.streams.processor.internals.StreamsPartitionAssignor",
      "allDeclaredMethods": true,
      "allPublicConstructors": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.processor.internals.assignment.AssignorConfiguration"
      },
      "type": "org.apache.kafka.streams.processor.internals.assignment.HighAvailabilityTaskAssignor",
      "allDeclaredMethods": true,
      "allPublicConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.kstream.internals.AbstractConfigurableStoreFactory"
      },
      "type": "org.apache.kafka.streams.state.BuiltInDslStoreSuppliers$InMemoryDslStoreSuppliers",
      "allPublicConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.apache.kafka.streams.kstream.internals.AbstractConfigurableStoreFactory"
      },
      "type": "org.apache.kafka.streams.state.BuiltInDslStoreSuppliers$RocksDBDslStoreSuppliers",
      "allPublicConstructors": true
    }
  ],
  "jni": [
    {
      "condition": {
        "typeReached": "org.rocksdb.RocksDB"
      },
      "type": "org.rocksdb.RocksDBException",
      "allDeclaredFields": true,
      "allDeclaredMethods": true,
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.rocksdb.RocksDB"
      },
      "type": "org.rocksdb.Status",
      "allDeclaredFields": true,
      "allDeclaredMethods": true,
      "allDeclaredConstructors": true
    }
  ]
}