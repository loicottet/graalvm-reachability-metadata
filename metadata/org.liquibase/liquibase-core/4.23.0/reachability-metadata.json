{
  "reflection": [
    {
      "condition": {
        "typeReached": "liquibase.snapshot.SnapshotGeneratorFactory"
      },
      "type": "java.util.ArrayList",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.lockservice.StandardLockService"
      },
      "type": "java.util.HashSet",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.snapshot.SnapshotGeneratorFactory"
      },
      "type": "java.util.concurrent.ConcurrentHashMap",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.util.ObjectUtil$DefaultBeanIntrospector"
      },
      "type": "liquibase.AbstractExtensibleObject"
    },
    {
      "condition": {
        "typeReached": "liquibase.util.ObjectUtil$DefaultBeanIntrospector"
      },
      "type": "liquibase.change.AbstractChange"
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.AbstractSQLChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.changelog.RanChangeSet"
      },
      "type": "liquibase.change.AbstractSQLChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.util.ObjectUtil$DefaultBeanIntrospector"
      },
      "type": "liquibase.change.AbstractTableChange"
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.change.AddColumnConfig",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.change.ChangeFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.change.AbstractChange"
      },
      "type": "liquibase.change.ColumnConfig",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.change.AbstractChange"
      },
      "type": "liquibase.change.ConstraintsConfig",
      "allDeclaredFields": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.core.UpdateDataChange"
      },
      "type": "liquibase.change.core.AbstractModifyDataChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AddAutoIncrementChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AddColumnChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AddDefaultValueChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AddForeignKeyConstraintChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AddLookupTableChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AddNotNullConstraintChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AddPrimaryKeyChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AddUniqueConstraintChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.AlterSequenceChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.CreateIndexChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.CreateProcedureChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.CreateSequenceChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.CreateTableChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.CreateViewChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DeleteDataChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropAllForeignKeyConstraintsChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropColumnChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropDefaultValueChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropForeignKeyConstraintChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropIndexChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropNotNullConstraintChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropPrimaryKeyChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropProcedureChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropSequenceChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropTableChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropUniqueConstraintChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.DropViewChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.EmptyChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.ExecuteShellCommandChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.InsertDataChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.LoadDataChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.LoadUpdateDataChange"
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.MergeColumnChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.ModifyDataTypeChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.OutputChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.RawSQLChange"
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.RenameColumnChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.RenameSequenceChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.RenameTableChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.RenameViewChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.SQLFileChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.SetColumnRemarksChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.SetTableRemarksChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.StopChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.TagDatabaseChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.core.UpdateDataChange",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.change.ChangeFactory"
      },
      "type": "liquibase.change.custom.CustomChangeWrapper",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.changelog.ChangeLogHistoryServiceFactory"
      },
      "type": "liquibase.changelog.ChangeLogHistoryServiceFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.changelog.ChangeLogHistoryServiceFactory"
      },
      "type": "liquibase.changelog.StandardChangeLogHistoryService",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.CommandFactory"
      },
      "type": "liquibase.command.CommandFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.CommandFactory"
      },
      "type": "liquibase.command.core.DropAllCommandStep",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.CommandFactory"
      },
      "type": "liquibase.command.core.UpdateCommandStep",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.CommandFactory"
      },
      "type": "liquibase.command.core.helpers.ChangeExecListenerCommandStep",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.CommandFactory"
      },
      "type": "liquibase.command.core.helpers.DatabaseChangelogCommandStep",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.CommandFactory"
      },
      "type": "liquibase.command.core.helpers.DbUrlConnectionCommandStep",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.CommandFactory"
      },
      "type": "liquibase.command.core.helpers.LockServiceCommandStep",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.CommandFactory"
      },
      "type": "liquibase.command.core.helpers.ShowSummaryArgument",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.configuration.LiquibaseConfiguration"
      },
      "type": "liquibase.configuration.ConfiguredValueModifierFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.Scope"
      },
      "type": "liquibase.configuration.LiquibaseConfiguration",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.database.core.H2Database"
      },
      "type": "liquibase.database.jvm.JdbcConnection",
      "methods": [
        {
          "name": "getWrappedConnection",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.change.AbstractChange"
      },
      "type": "liquibase.datatype.core.BigIntType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "setAutoIncrement",
          "parameterTypes": [
            "boolean"
          ]
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.BinaryTypeSnowflake",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.BlobType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.BooleanType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.change.AbstractChange"
      },
      "type": "liquibase.datatype.core.CharType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.ClobType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.DateTimeType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.DoubleDataTypeSnowflake",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.DoubleType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.change.AbstractChange"
      },
      "type": "liquibase.datatype.core.IntType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "setAutoIncrement",
          "parameterTypes": [
            "boolean"
          ]
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.TextDataTypeSnowflake",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.datatype.DataTypeFactory"
      },
      "type": "liquibase.datatype.core.TimestampNTZTypeSnowflake",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.change.AbstractChange"
      },
      "type": "liquibase.datatype.core.VarcharType",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.diff.DiffGeneratorFactory"
      },
      "type": "liquibase.diff.core.StandardDiffGenerator",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.lockservice.StandardLockService"
      },
      "type": "liquibase.executor.ExecutorService",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.executor.ExecutorService"
      },
      "type": "liquibase.executor.jvm.JdbcExecutor",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.license.LicenseServiceUtils"
      },
      "type": "liquibase.license.LicenseServiceFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.lockservice.LockServiceFactory"
      },
      "type": "liquibase.lockservice.StandardLockService",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.Scope"
      },
      "type": "liquibase.logging.core.LogServiceFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.Scope"
      },
      "type": "liquibase.logging.mdc.MdcManagerFactory",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.util.ObjectUtil$DefaultBeanIntrospector"
      },
      "type": "liquibase.plugin.AbstractPlugin"
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.AbstractPrecondition",
      "allDeclaredFields": true
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.PreconditionLogic",
      "allDeclaredFields": true
    },
    {
      "condition": {
        "typeReached": "liquibase.precondition.PreconditionLogic"
      },
      "type": "liquibase.precondition.PreconditionLogic",
      "fields": [
        {
          "name": "nestedPreconditions"
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.serializer.ReflectionSerializer"
      },
      "type": "liquibase.precondition.PreconditionLogic",
      "fields": [
        {
          "name": "nestedPreconditions"
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.core.AndPrecondition",
      "allDeclaredFields": true
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.core.ChangeLogPropertyDefinedPrecondition",
      "allDeclaredFields": true,
      "fields": [
        {
          "name": "property"
        },
        {
          "name": "value"
        }
      ],
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "setProperty",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "setValue",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.core.DBMSPrecondition",
      "allDeclaredFields": true
    },
    {
      "condition": {
        "typeReached": "liquibase.precondition.PreconditionFactory"
      },
      "type": "liquibase.precondition.core.DBMSPrecondition",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.precondition.PreconditionLogic"
      },
      "type": "liquibase.precondition.core.DBMSPrecondition",
      "fields": [
        {
          "name": "type"
        }
      ],
      "methods": [
        {
          "name": "setType",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.core.OrPrecondition",
      "allDeclaredFields": true,
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.core.PreconditionContainer",
      "allDeclaredFields": true,
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "liquibase.precondition.core.PreconditionContainer"
      },
      "type": "liquibase.precondition.core.PreconditionContainer",
      "fields": [
        {
          "name": "onError"
        },
        {
          "name": "onErrorMessage"
        },
        {
          "name": "onFail"
        },
        {
          "name": "onFailMessage"
        },
        {
          "name": "onSqlOutput"
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.core.RunningAsPrecondition",
      "allDeclaredFields": true,
      "fields": [
        {
          "name": "username"
        }
      ],
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "setUsername",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.core.SqlPrecondition",
      "allDeclaredFields": true,
      "fields": [
        {
          "name": "expectedResult"
        }
      ],
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "setExpectedResult",
          "parameterTypes": [
            "java.lang.String"
          ]
        },
        {
          "name": "setSql",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.command.core.helpers.DatabaseChangelogCommandStep"
      },
      "type": "liquibase.precondition.core.TableExistsPrecondition",
      "allDeclaredFields": true,
      "fields": [
        {
          "name": "tableName"
        }
      ],
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        },
        {
          "name": "setTableName",
          "parameterTypes": [
            "java.lang.String"
          ]
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.serializer.ReflectionSerializer"
      },
      "type": "liquibase.serializer.AbstractLiquibaseSerializable",
      "allDeclaredFields": true
    },
    {
      "condition": {
        "typeReached": "liquibase.sql.visitor.SqlVisitorFactory"
      },
      "type": "liquibase.sql.visitor.AppendSqlVisitor",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.sql.visitor.SqlVisitorFactory"
      },
      "type": "liquibase.sql.visitor.PrependSqlVisitor",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.sql.visitor.SqlVisitorFactory"
      },
      "type": "liquibase.sql.visitor.RegExpReplaceSqlVisitor",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    },
    {
      "condition": {
        "typeReached": "liquibase.sql.visitor.SqlVisitorFactory"
      },
      "type": "liquibase.sql.visitor.ReplaceSqlVisitor",
      "methods": [
        {
          "name": "<init>",
          "parameterTypes": []
        }
      ]
    }
  ]
}