{
  "reflection": [
    {
      "condition": {
        "typeReached": "org.thymeleaf.util.ExpressionUtils"
      },
      "type": "java.lang.Iterable",
      "allDeclaredMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.util.ExpressionUtils"
      },
      "type": "java.util.Calendar",
      "allDeclaredMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.util.ExpressionUtils"
      },
      "type": "java.util.Collection",
      "allDeclaredMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.util.ExpressionUtils"
      },
      "type": "java.util.List",
      "allDeclaredMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.util.ExpressionUtils"
      },
      "type": "java.util.Map",
      "allDeclaredMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.util.ExpressionUtils"
      },
      "type": "java.util.Map$Entry",
      "allDeclaredMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.util.ExpressionUtils"
      },
      "type": "java.util.Set",
      "allDeclaredMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Aggregates",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Arrays",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Bools",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Calendars",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Dates",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.ExecutionInfo",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Ids",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Maps",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Messages",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Numbers",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Objects",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Sets",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Strings",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.expression.Uris",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.OGNLVariableExpressionEvaluator"
      },
      "type": "org.thymeleaf.extras.java8time.expression.Temporals",
      "allPublicMethods": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.AdditionExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.AdditionSubtractionExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.AndExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.BinaryOperationExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.BooleanTokenExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.ComplexExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.ConditionalExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.DefaultExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.DivisionExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.EqualsExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.EqualsNotEqualsExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.FragmentExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.GenericTokenExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.GreaterLesserExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.GreaterOrEqualToExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.GreaterThanExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.LessOrEqualToExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.LessThanExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.LinkExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.MessageExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.MinusExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.MultiplicationDivisionRemainderExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.MultiplicationExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.NegationExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.NoOpTokenExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.NotEqualsExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.NullTokenExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.NumberTokenExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.OrExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.RemainderExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.SelectionVariableExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.SubtractionExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.TextLiteralExpression",
      "allDeclaredConstructors": true
    },
    {
      "condition": {
        "typeReached": "org.thymeleaf.standard.expression.StandardExpressionParser"
      },
      "type": "org.thymeleaf.standard.expression.VariableExpression",
      "allDeclaredConstructors": true
    }
  ],
  "resources": [
    {
      "condition": {
        "typeReached": "org.thymeleaf.util.ClassLoaderUtils"
      },
      "glob": "org/thymeleaf/thymeleaf.properties"
    }
  ],
  
  "bundles": []
}